<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:web="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <display-name>Archetype Created Web Application</display-name>
  
  <!-- 리스너를 등록하여 root 컨텍스트가 생성되게만든다.
		루트 웹 어플리케이션 컨텍스트의 디폴트 설정파일은 /WEB-INF/applicationContext.xml이다. 
		만약 사용할 이름이 다르거나, 설정파일이 여러개인 경우 contextConfigLocation이라는 컨텍스트 파라미터를 추가하여 설정해준다.
		
		웹 환경과 관련 없는 빈(예를 들어 서비스 계층, 데이터 액세스 계층 등)은 root 컨텍스트에 등록한다.
   -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  
  <!-- 프레젠테이션 계층의 빈을 등록할 컨텍스트
  		DispatcherServlet은 초기화 시에 서블릿 레벨의 웹어플리케이션 컨텍스트를 생성해준다.
  		이 때 서블릿 컨텍스트가 사용할 설정파일 이름은 서블릿 이름뒤에 -servlet.xml을 붙인것을 디폴트로한다.
  		
  		서블릿 컨텍스트의 부모 컨텍스트는 root 컨텍스트다.
  		자식 컨텍스트는 부모 컨텍스트의 빈을 참조할 수 있으므로 root 컨텍스트의 HelloSpring 빈을 DI 받을 수 있다.
   		
   		DispatcherServlet을 경우에 따라 2개이상 설정할 수 있는데 이 경우에는 각각의 DispatcherServlet의 ApplicationContext가 각각 독립적이기 때문에
   		각각의 설정 파일에서 생성한 빈을 서로 사용할 수없다.
   		이런 경우 두 컨텍스트가 동시에 필요한 빈은 root컨텍스트에 등록하여 사용할 수 있다.
   		
   		ContextLoaderListener와 DispatcherServlet은 각각 ApplicationContext를 생성하는데,
   		ContextLoaderListener가 생성하는 컨켁스트가 root 컨텍스트가되고 DispatcherServlet이 생성한 인스턴스는 자식 컨텍스트가 된다.   		
   
   -->
  <servlet>
  	<servlet-name>start</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>start</servlet-name>
  	<url-pattern>/</url-pattern>
  </servlet-mapping>
  
</web-app>